akka {
  loglevel = INFO
  version = 2.4.17
}

akka.http {
  server {

    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # If this setting is not `infistomization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 30 s
  }
}

mysqldb {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    url = "jdbc:mysql://localhost:3306/yourdb?useSSL=false"
    user = "*"
    password = "*"
    profile = com.mysql.jdbc.Driver
    keepAliveConnection = true
    numThreads = 5
  }
}

h2db {
  profile = "slick.jdbc.H2Profile$"
  db {
    url = "jdbc:h2:mem:test1"
    profile = org.h2.Driver
    keepAliveConnection = true
    numThreads = 10
  }
}

h2test {
  profile = "slick.jdbc.H2Profile$"
  db {
    url = "jdbc:h2:mem:testing"
    driver = org.h2.Driver
  }
}

pgdb {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:test1"
    driver = org.postgresql.Driver
    user = ""
    pwd = ""
    numThreads = 10
  }
}
spark {
  master = "//todo"
  appName = "sparkcluster"
}

sparklocal {
  master = "local[2]"
  appName = "sparklocal"
}

httpServer {
  host = "localhost"
  port = 8080
}

domainName ="localhost:8080"


jwtToken {
  typ = "JWT"
  algorithm = "HS512"
  timeout = 31536000
  secret = "your secret"
}

aes {
  secret = "your secret"
}

ldap {
  isEnable = false
  url = ""
  dc = ""
  user = ""
  pwd = ""
  read.timeout = "5000"
  connect {
    timeout = "5000"
    pool = true
  }
}


cache {
  isEnable = false
  url: "127.0.0.1:6379"
  auth:""
  expire:3
  mode:"stand-alone"
}

